{# @pebvariable name="imports" type="java.util.List<java.util.Map<String, String>>" #}
{# @pebvariable name="operations" type="org.openapitools.codegen.model.OperationMap" #}
{# @pebvariable name="authMethods" type="java.util.ArrayList<org.openapitools.codegen.CodegenSecurity>" -#}
import { {{operations.classname}} } from "../../api";

{% for import in imports -%}
import { {{import.classname}} } from '../{{import.filename}}';
{% endfor %}

import { http, HttpResponse } from "msw";
import { setupServer } from "msw/node";
import { deepEqual, equal } from "assert";

const pkg = require("../../../../package.json");

const channel_access_token = "test_channel_access_token";

describe("{{operations.classname}}", () => {
  const server = setupServer();
  before(() => { server.listen() });
  after(() => { server.close() });
  afterEach(() => { server.resetHandlers() })

  const client = new {{operations.classname}}({
    {% if authMethods != null -%}
    channelAccessToken: channel_access_token,
    {% endif -%}
  });

{% for op in operations.operation %}
  it("{{op.nickname}}", async () => {
    let requestCount = 0;

    const endpoint = "{{endpoint(operations.classname)}}{{op.path}}"
{% for param in op.allParams -%}
    {% if param.isNumber or param.isInteger or param.isLong -%}
            .replace("{{ "{" + param.paramName + "}" }}", "0") // number
        {% elseif param.isString -%}
            .replace("{{ "{" + param.paramName + "}" }}", "DUMMY") // string
    {% endif -%}
{% endfor %}{# allParams #}
    ;

    server.use(
      http.{{ op.httpMethod|lower }}(
        endpoint,
        ({ request, params, cookies }) => {
          requestCount++;

          {% if authMethods != null -%}
          equal(
            request.headers.get("Authorization"),
            `Bearer ${channel_access_token}`,
          );
          {% endif -%}
          equal(
            request.headers.get("User-Agent"),
            `${pkg.name}/${pkg.version}`,
          );

          return HttpResponse.json({});
        },
      )
    );

    const res = await client.{{op.nickname}}(
{% for param in op.allParams -%}
        // {{ param.paramName }}: {{ param.dataType }}
    {% if param.isFile -%}
            new Blob([]), // paramName={{ param.paramName }}
        {% elseif param.isModel -%}
            {} as unknown as {{ param.dataType }}, // paramName={{ param.paramName }}
        {% elseif param.isEnum -%}
            "DUMMY" as unknown as {{ param.dataType }}, // paramName={{ param.paramName }}(enum)
        {% elseif param.isExplode -%}
            "DUMMY" as unknown as {{ param.dataType}}, // paramName={{param.paramName}}(enum)
        {% elseif param.isString -%}
            "DUMMY", // {{param.paramName}}(string)
        {% elseif param.isNumber or param.isInteger or param.isLong -%}
            0, // paramName={{param.paramName}}(number or int or long)
        {% elseif param.isBoolean -%}
            true, // paramName={{param.paramName}}
        {% else -%}
            // UNKNOWN TYPE: paramName={{param.paramName}} {{ param.dataType }}
    {% endif -%}
{% endfor %}
    );
{% if op.isResponseFile %}
    res.destroy();
{% endif %}

    equal(requestCount, 1);
  });

{% endfor %}{# op #}
});
