{# @pebvariable name="imports" type="java.util.List<java.util.Map<String, String>>" #}
{# @pebvariable name="operations" type="org.openapitools.codegen.model.OperationMap" #}
{# @pebvariable name="authMethods" type="java.util.ArrayList<org.openapitools.codegen.CodegenSecurity>" -#}
import { {{operations.classname}} } from "../../api";

{% for import in imports -%}
import { {{import.classname}} } from '../{{import.filename}}';
{% endfor %}

import { createServer } from "node:http";
import { deepEqual, equal, ok } from "node:assert";

const pkg = require("../../../../package.json");

const channel_access_token = "test_channel_access_token";

{% macro paramDummyValue(param) %}
{# @pebvariable name="param" type="org.openapitools.codegen.CodegenParameter" #}
        // {{ param.paramName }}: {{ param.dataType }}
    {% if param.isFile -%}
            new Blob([]), // paramName={{ param.paramName }}
        {% elseif param.isModel -%}
            {} as unknown as {{ param.dataType }}, // paramName={{ param.paramName }}
        {% elseif param.isEnum -%}
            "DUMMY" as unknown as {{ param.dataType }}, // paramName={{ param.paramName }}(enum)
        {% elseif param.isExplode -%}
            "DUMMY" as unknown as {{ param.dataType}}, // paramName={{param.paramName}}(enum)
        {% elseif param.isString -%}
            "DUMMY", // {{param.paramName}}(string)
        {% elseif param.isNumber or param.isInteger or param.isLong -%}
            0, // paramName={{param.paramName}}(number or int or long)
        {% elseif param.isBoolean -%}
            true, // paramName={{param.paramName}}
        {% else -%}
            // UNKNOWN TYPE: paramName={{param.paramName}} {{ param.dataType }}
    {% endif -%}
{% endmacro %}

{% macro renderTest(operations, op, authMethods, withHttpInfo) %}
{# @pebvariable name="withHttpInfo" type="java.lang.Boolean" #}
{# @pebvariable name="op" type="org.openapitools.codegen.CodegenOperation" #}
  it("{{op.nickname}}{% if withHttpInfo %}WithHttpInfo{% endif %}", async () => {
    let requestCount = 0;

    const server = createServer((req, res) => {
      requestCount++;

      equal(req.method, "{{ op.httpMethod }}");
      const reqUrl = new URL(req.url, "http://localhost/");
      equal(reqUrl.pathname, "{{ op.path }}"
        {% for param in op.allParams -%}
    {% if param.isNumber or param.isInteger or param.isLong -%}
                    .replace("{{ "{" + param.paramName + "}" }}", "0") // number
                {% elseif param.isString -%}
                    .replace("{{ "{" + param.paramName + "}" }}", "DUMMY") // string
            {% endif -%}
{% endfor %}{# allParams #}
        );


      {% if op.hasQueryParams %}
      // Query parameters
      const queryParams = new URLSearchParams(reqUrl.search);
          {% for param in op.queryParams -%}
      equal(queryParams.get("{{param.paramName}}"), String({{ paramDummyValue(param) }}));
          {% endfor %}
{% endif %}
    {% if authMethods != null -%}
      equal(
        req.headers["authorization"],
        `Bearer ${channel_access_token}`,
      );
    {% endif -%}
      equal(
        req.headers["user-agent"],
        `${pkg.name}/${pkg.version}`,
      );
      {% if op.isMultipart %}
      ok(
        req.headers["content-type"]
          .startsWith(`multipart/form-data; boundary=`),
      );
      {% endif %}

      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(JSON.stringify({}));
    });
    await new Promise((resolve) => {
      server.listen(0);
      server.on('listening', resolve);
    });

    const serverAddress = server.address();
    if (typeof serverAddress === "string" || serverAddress === null) {
       throw new Error("Unexpected server address: " + serverAddress);
    }

    const client = new {{operations.classname}}({
    {% if authMethods != null -%}
        channelAccessToken: channel_access_token,
    {% endif -%}
        baseURL: `http://localhost:${String(serverAddress.port)}/`
    });

    const res = await client.{{op.nickname}}{% if withHttpInfo %}WithHttpInfo{% endif %}(
{% for param in op.allParams -%}
{{ paramDummyValue(param) }}
{% endfor %}
    );

    equal(requestCount, 1);
    server.close();
  });

{% endmacro %}

describe("{{operations.classname}}", () => {
{% for op in operations.operation %}
    {{ renderTest(operations, op, authMethods, true) }}
    {{ renderTest(operations, op, authMethods, false) }}
{% endfor %}{# op #}
});
