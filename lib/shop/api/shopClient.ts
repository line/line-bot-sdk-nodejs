/**
 * Mission Stickers API
 * This document describes LINE Mission Stickers API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { MissionStickerRequest } from "../model/missionStickerRequest";

import * as Types from "../../types";
import { ensureJSON } from "../../utils";
import { Readable } from "stream";

import HTTPClient from "../../http";

const pkg = require("../../../package.json");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

interface httpClientConfig {
  baseURL?: string;
  channelAccessToken: string;
  // TODO support defaultHeaders?
}

export class ShopClient {
  private config: httpClientConfig;

  constructor(config: httpClientConfig) {
    this.config = {
      baseURL: "https://api.line.me",
      ...config,
    };
  }

  /**
   * Sends a mission sticker.
   * @param missionStickerRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/partner-docs/#send-mission-stickers-v3"> Documentation</a>
   */
  public async missionStickerV3(
    missionStickerRequest: MissionStickerRequest,
  ): Promise<Types.MessageAPIResponseBase> {
    const requestUrl = new URL("/shop/v3/mission", this.config.baseURL);

    const resp = await fetch(requestUrl, {
      method: "POST",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(missionStickerRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
}
