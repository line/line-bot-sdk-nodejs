/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { GetMessageContentTranscodingResponse } from "../model/getMessageContentTranscodingResponse";

import * as Types from "../../types";
import { ensureJSON } from "../../utils";
import { Readable } from "stream";

import HTTPFetchClient, { convertResponseToReadable } from "../../http-fetch";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

interface httpClientConfig {
  baseURL?: string;
  channelAccessToken: string;
  // TODO support defaultHeaders?
}

export class MessagingApiBlobClient {
  private httpClient: HTTPFetchClient;

  constructor(config: httpClientConfig) {
    if (!config.baseURL) {
      config.baseURL = "https://api-data.line.me";
    }
    this.httpClient = new HTTPFetchClient({
      defaultHeaders: {
        Authorization: "Bearer " + config.channelAccessToken,
      },
      baseURL: config.baseURL,
    });
  }

  private async parseHTTPResponse(response: Response) {
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    let resBody: Record<string, any> = {
      ...(await response.json()),
    };
    if (response.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME)) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = response.headers.get(
        LINE_REQUEST_ID_HTTP_HEADER_NAME,
      );
    }
    return resBody;
  }

  /**
   * Download image, video, and audio data sent from users.
   * @param messageId Message ID of video or audio
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-content"> Documentation</a>
   */
  public async getMessageContent(messageId: string): Promise<Readable> {
    const response = await this.httpClient.get(
      "/v2/bot/message/{messageId}/content".replace(
        "{" + "messageId" + "}",
        String(messageId),
      ),
    );
    return convertResponseToReadable(response);
  }
  /**
   * Get a preview image of the image or video
   * @param messageId Message ID of image or video
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-image-or-video-preview"> Documentation</a>
   */
  public async getMessageContentPreview(messageId: string): Promise<Readable> {
    const response = await this.httpClient.get(
      "/v2/bot/message/{messageId}/content/preview".replace(
        "{" + "messageId" + "}",
        String(messageId),
      ),
    );
    return convertResponseToReadable(response);
  }
  /**
   * Verify the preparation status of a video or audio for getting
   * @param messageId Message ID of video or audio
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#verify-video-or-audio-preparation-status"> Documentation</a>
   */
  public async getMessageContentTranscodingByMessageId(
    messageId: string,
  ): Promise<GetMessageContentTranscodingResponse> {
    const res = await this.httpClient.get(
      "/v2/bot/message/{messageId}/content/transcoding".replace(
        "{messageId}",
        String(messageId),
      ),
    );
    const result = (await this.parseHTTPResponse(
      res,
    )) as GetMessageContentTranscodingResponse;
    return ensureJSON(result);
  }
  /**
   * Download rich menu image.
   * @param richMenuId ID of the rich menu with the image to be downloaded
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image"> Documentation</a>
   */
  public async getRichMenuImage(richMenuId: string): Promise<Readable> {
    const response = await this.httpClient.get(
      "/v2/bot/richmenu/{richMenuId}/content".replace(
        "{" + "richMenuId" + "}",
        String(richMenuId),
      ),
    );
    return convertResponseToReadable(response);
  }
  /**
   * Upload rich menu image
   * @param richMenuId The ID of the rich menu to attach the image to
   * @param body
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image"> Documentation</a>
   */
  public async setRichMenuImage(
    richMenuId: string,
    body?: Blob,
  ): Promise<Types.MessageAPIResponseBase> {
    const params = body;

    const res = await this.httpClient.postBinaryContent(
      "/v2/bot/richmenu/{richMenuId}/content".replace(
        "{richMenuId}",
        String(richMenuId),
      ),
      params,
    );
    const result = (await this.parseHTTPResponse(
      res,
    )) as Types.MessageAPIResponseBase;
    return ensureJSON(result);
  }
}
