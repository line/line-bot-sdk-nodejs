/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { AddAudienceToAudienceGroupRequest } from "../model/addAudienceToAudienceGroupRequest";
import { AudienceGroupCreateRoute } from "../model/audienceGroupCreateRoute";
import { AudienceGroupStatus } from "../model/audienceGroupStatus";
import { CreateAudienceGroupRequest } from "../model/createAudienceGroupRequest";
import { CreateAudienceGroupResponse } from "../model/createAudienceGroupResponse";
import { CreateClickBasedAudienceGroupRequest } from "../model/createClickBasedAudienceGroupRequest";
import { CreateClickBasedAudienceGroupResponse } from "../model/createClickBasedAudienceGroupResponse";
import { CreateImpBasedAudienceGroupRequest } from "../model/createImpBasedAudienceGroupRequest";
import { CreateImpBasedAudienceGroupResponse } from "../model/createImpBasedAudienceGroupResponse";
import { ErrorResponse } from "../model/errorResponse";
import { GetAudienceDataResponse } from "../model/getAudienceDataResponse";
import { GetAudienceGroupAuthorityLevelResponse } from "../model/getAudienceGroupAuthorityLevelResponse";
import { GetAudienceGroupsResponse } from "../model/getAudienceGroupsResponse";
import { UpdateAudienceGroupAuthorityLevelRequest } from "../model/updateAudienceGroupAuthorityLevelRequest";
import { UpdateAudienceGroupDescriptionRequest } from "../model/updateAudienceGroupDescriptionRequest";

import * as Types from "../../types";
import { ensureJSON } from "../../utils";
import { Readable } from "stream";

import HTTPClient from "../../http";

const pkg = require("../../../package.json");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

interface httpClientConfig {
  baseURL?: string;
  channelAccessToken: string;
  // TODO support defaultHeaders?
}

export class ManageAudienceClient {
  private config: httpClientConfig;

  constructor(config: httpClientConfig) {
    this.config = {
      baseURL: "https://api.line.me",
      ...config,
    };
  }

  /**
   * Activate audience
   * @param audienceGroupId The audience ID.
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#activate-audience-group"> Documentation</a>
   */
  public async activateAudienceGroup(
    audienceGroupId: number,
  ): Promise<Types.MessageAPIResponseBase> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/{audienceGroupId}/activate".replace(
        "{" + "audienceGroupId" + "}",
        String(audienceGroupId),
      ),
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "PUT",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,
      },
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
   * @param addAudienceToAudienceGroupRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group"> Documentation</a>
   */
  public async addAudienceToAudienceGroup(
    addAudienceToAudienceGroupRequest: AddAudienceToAudienceGroupRequest,
  ): Promise<Types.MessageAPIResponseBase> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/upload",
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "PUT",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(addAudienceToAudienceGroupRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Create audience for uploading user IDs (by JSON)
   * @param createAudienceGroupRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group"> Documentation</a>
   */
  public async createAudienceGroup(
    createAudienceGroupRequest: CreateAudienceGroupRequest,
  ): Promise<CreateAudienceGroupResponse> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/upload",
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "POST",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(createAudienceGroupRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Create audience for click-based retargeting
   * @param createClickBasedAudienceGroupRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#create-click-audience-group"> Documentation</a>
   */
  public async createClickBasedAudienceGroup(
    createClickBasedAudienceGroupRequest: CreateClickBasedAudienceGroupRequest,
  ): Promise<CreateClickBasedAudienceGroupResponse> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/click",
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "POST",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(createClickBasedAudienceGroupRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Create audience for impression-based retargeting
   * @param createImpBasedAudienceGroupRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#create-imp-audience-group"> Documentation</a>
   */
  public async createImpBasedAudienceGroup(
    createImpBasedAudienceGroupRequest: CreateImpBasedAudienceGroupRequest,
  ): Promise<CreateImpBasedAudienceGroupResponse> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/imp",
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "POST",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(createImpBasedAudienceGroupRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Delete audience
   * @param audienceGroupId The audience ID.
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#delete-audience-group"> Documentation</a>
   */
  public async deleteAudienceGroup(
    audienceGroupId: number,
  ): Promise<Types.MessageAPIResponseBase> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/{audienceGroupId}".replace(
        "{" + "audienceGroupId" + "}",
        String(audienceGroupId),
      ),
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "DELETE",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,
      },
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Gets audience data.
   * @param audienceGroupId The audience ID.
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-audience-group"> Documentation</a>
   */
  public async getAudienceData(
    audienceGroupId: number,
  ): Promise<GetAudienceDataResponse> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/{audienceGroupId}".replace(
        "{" + "audienceGroupId" + "}",
        String(audienceGroupId),
      ),
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "GET",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,
      },
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Get the authority level of the audience
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-authority-level"> Documentation</a>
   */
  public async getAudienceGroupAuthorityLevel(): Promise<GetAudienceGroupAuthorityLevelResponse> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/authorityLevel",
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "GET",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,
      },
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Gets data for more than one audience.
   * @param page The page to return when getting (paginated) results. Must be 1 or higher.
   * @param description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.
   * @param status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.
   * @param size The number of audiences per page. Default: 20 Max: 40
   * @param includesExternalPublicGroups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.
   * @param createRoute How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API.
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-audience-groups"> Documentation</a>
   */
  public async getAudienceGroups(
    page: number,
    description?: string,
    status?: AudienceGroupStatus,
    size?: number,
    includesExternalPublicGroups?: boolean,
    createRoute?: AudienceGroupCreateRoute,
  ): Promise<GetAudienceGroupsResponse> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/list",
      this.config.baseURL,
    );

    const queryParams = new URLSearchParams();
    queryParams.append("page", String(page));
    queryParams.append("description", String(description));
    queryParams.append("status", String(status));
    queryParams.append("size", String(size));
    queryParams.append(
      "includesExternalPublicGroups",
      String(includesExternalPublicGroups),
    );
    queryParams.append("createRoute", String(createRoute));

    requestUrl.search = queryParams.toString();

    const resp = await fetch(requestUrl, {
      method: "GET",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,
      },
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Change the authority level of the audience
   * @param updateAudienceGroupAuthorityLevelRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#change-authority-level"> Documentation</a>
   */
  public async updateAudienceGroupAuthorityLevel(
    updateAudienceGroupAuthorityLevelRequest: UpdateAudienceGroupAuthorityLevelRequest,
  ): Promise<Types.MessageAPIResponseBase> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/authorityLevel",
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "PUT",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(updateAudienceGroupAuthorityLevelRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
  /**
   * Renames an existing audience.
   * @param audienceGroupId The audience ID.
   * @param updateAudienceGroupDescriptionRequest
   *
   * @see <a href="https://developers.line.biz/en/reference/messaging-api/#set-description-audience-group"> Documentation</a>
   */
  public async updateAudienceGroupDescription(
    audienceGroupId: number,
    updateAudienceGroupDescriptionRequest: UpdateAudienceGroupDescriptionRequest,
  ): Promise<Types.MessageAPIResponseBase> {
    const requestUrl = new URL(
      "/v2/bot/audienceGroup/{audienceGroupId}/updateDescription".replace(
        "{" + "audienceGroupId" + "}",
        String(audienceGroupId),
      ),
      this.config.baseURL,
    );

    const resp = await fetch(requestUrl, {
      method: "PUT",
      headers: {
        Authorization: "Bearer " + this.config.channelAccessToken,
        "User-Agent": `${pkg.name}/${pkg.version}`,

        "Content-type": "application/json",
      },

      body: JSON.stringify(updateAudienceGroupDescriptionRequest),
    });

    const resBody = await resp.json();

    // for backward compatibility, inject x-line-request-id to response body.
    const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
    const requestIdHeader = resp.headers.get(LINE_REQUEST_ID_HTTP_HEADER_NAME);
    if (requestIdHeader) {
      resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] = requestIdHeader;
    }

    return resBody;
  }
}
